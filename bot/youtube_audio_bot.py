import logging
import asyncio
from pathlib import Path
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.enums import ParseMode

from .youtube_downloader import YouTubeDownloader
from .database import DatabaseManager
from settings import settings


class UserStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM"""
    waiting_for_url = State()


class YouTubeAudioBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –∏–∑ YouTube"""
    
    def __init__(self):
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.session = AiohttpSession()
        self.bot = Bot(token=settings.BOT_TOKEN, session=self.session)
        self.dp = Dispatcher()
        self.downloader = YouTubeDownloader()
        self.db = DatabaseManager()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self._register_handlers()
        
        self.logger.info("YouTube Audio Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.dp.message.register(self._start_handler, Command("start"))
        self.dp.message.register(self._help_handler, Command("help"))
        self.dp.message.register(self._stats_handler, Command("stats"))
        self.dp.message.register(self._url_handler, UserStates.waiting_for_url)
        self.dp.message.register(self._default_handler)
    
    async def _start_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await state.clear()
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", callback_data="download")],
            [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ])
        
        welcome_text = (
            "üéµ <b>YouTube Audio Bot</b>\n\n"
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ YouTube –≤–∏–¥–µ–æ.\n\n"
            "üìã <b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –∞—É–¥–∏–æ –∏–∑ YouTube –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ MP3 —Ñ–æ—Ä–º–∞—Ç\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ—Ç–æ–≤—ã–π —Ñ–∞–π–ª –≤ Telegram\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ!"
        )
        
        await message.answer(
            welcome_text, 
            reply_markup=keyboard, 
            parse_mode=ParseMode.HTML
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        await self.db.add_user(message.from_user.id, message.from_user.username)
        
        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    
    async def _help_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
            "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "üîπ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∞–µ—Ç –∞—É–¥–∏–æ\n"
            "üîπ –í—ã –ø–æ–ª—É—á–∏—Ç–µ MP3 —Ñ–∞–π–ª –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            "üìã <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:</b>\n"
            "‚Ä¢ https://www.youtube.com/watch?v=...\n"
            "‚Ä¢ https://youtu.be/...\n"
            "‚Ä¢ https://m.youtube.com/watch?v=...\n\n"
            "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {settings.MAX_FILE_SIZE} –ú–ë\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ –≤–∏–¥–µ–æ\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ {settings.MAX_DURATION // 3600} —á–∞—Å(–æ–≤)\n\n"
            "ü§ñ –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        )
        
        await message.answer(help_text, parse_mode=ParseMode.HTML)
    
    async def _stats_handler(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        stats = await self.db.get_user_stats(message.from_user.id)
        
        stats_text = (
            f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üéµ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.get('downloads', 0)}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats.get('registration_date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {stats.get('last_activity', '–°–µ–π—á–∞—Å')}"
        )
        
        await message.answer(stats_text, parse_mode=ParseMode.HTML)
    
    async def _url_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ URL YouTube –≤–∏–¥–µ–æ"""
        url = message.text.strip()
        
        if not self.downloader.is_valid_youtube_url(url):
            await message.answer(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ YouTube!\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ."
            )
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        processing_msg = await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
            audio_file_path = await self.downloader.download_audio(url)
            
            if audio_file_path == "TOO_LONG":
                max_hours = settings.MAX_DURATION // 3600
                await processing_msg.edit_text(
                    "‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n\n"
                    f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {max_hours} —á–∞—Å(–∞)\n"
                    "üéµ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ."
                )
                return
            
            if audio_file_path == "UNAVAILABLE":
                await processing_msg.edit_text(
                    "‚ùå –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è!\n\n"
                    "üö´ –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ\n"
                    "‚Ä¢ –ê–≤—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                )
                return
            
            if audio_file_path == "AGE_RESTRICTED":
                await processing_msg.edit_text(
                    "‚ùå –í–∏–¥–µ–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É!\n\n"
                    "üîû –≠—Ç–æ –≤–∏–¥–µ–æ –∏–º–µ–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–∞—á–∞–Ω–æ.\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                )
                return
            
            if audio_file_path == "PRIVATE":
                await processing_msg.edit_text(
                    "‚ùå –í–∏–¥–µ–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ!\n\n"
                    "üîí –≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ."
                )
                return
            
            if not audio_file_path or not Path(audio_file_path).exists():
                await processing_msg.edit_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, –≤–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∞—É–¥–∏–æ —Ñ–∞–π–ª...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            audio_file = Path(audio_file_path)
            with open(audio_file, 'rb') as audio:
                await message.answer_audio(
                    audio=audio,
                    caption=f"üéµ –ê—É–¥–∏–æ –∏–∑ YouTube –≤–∏–¥–µ–æ\nüìé {url}",
                    parse_mode=ParseMode.HTML
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            audio_file.unlink(missing_ok=True)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            await processing_msg.delete()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.db.increment_user_downloads(message.from_user.id)
            
            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL {url}: {e}")
            await processing_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å –¥—Ä—É–≥–æ–π —Å—Å—ã–ª–∫–æ–π."
            )
        
        finally:
            await state.clear()
    
    async def _default_handler(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç YouTube URL
        if self.downloader.is_valid_youtube_url(text):
            await state.set_state(UserStates.waiting_for_url)
            await self._url_handler(message, state)
        else:
            await message.answer(
                "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise
        finally:
            await self.session.close()
    
    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.session.close()
        await self.db.close() 